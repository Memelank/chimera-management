// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetAllEntitiesError, GetAllEntitiesResponse, UpdateUserData, UpdateUserError, UpdateUserResponse, CreateEntityData, CreateEntityError, CreateEntityResponse, GetProductCateData, GetProductCateError, GetProductCateResponse, UpdateProductCateData, UpdateProductCateError, UpdateProductCateResponse, DeleteProductCateData, DeleteProductCateError, DeleteProductCateResponse, GetAllEntities2Error, GetAllEntities2Response, UpdateEntityData, UpdateEntityError, UpdateEntityResponse, CreateEntity2Data, CreateEntity2Error, CreateEntity2Response, GetAllEntities6Error, GetAllEntities6Response, UpdateAddressData, UpdateAddressError, UpdateAddressResponse, CreateEntity5Data, CreateEntity5Error, CreateEntity5Response, GetAllEntities7Error, GetAllEntities7Response, UpdateEntity1Data, UpdateEntity1Error, UpdateEntity1Response, CreateEntity6Data, CreateEntity6Error, CreateEntity6Response, GetAllEntities1Error, GetAllEntities1Response, CreateEntity1Data, CreateEntity1Error, CreateEntity1Response, GetAllEntities3Error, GetAllEntities3Response, CreateEntity3Data, CreateEntity3Error, CreateEntity3Response, GetAllEntities4Error, GetAllEntities4Response, CreateEntity4Data, CreateEntity4Error, CreateEntity4Response, GetAllEntities5Error, GetAllEntities5Response, CreateOrderData, CreateOrderError, CreateOrderResponse, LoginData, LoginError, LoginResponse, GetEntityByNameData, GetEntityByNameError, GetEntityByNameResponse, GetEntityByName1Data, GetEntityByName1Error, GetEntityByName1Response } from './types.gen';
// import { customFetch } from '@/utils/customFetch';

const API_BASE_URL = 'http://localhost:80';

export const client = createClient(createConfig({baseUrl: API_BASE_URL}));
client.interceptors.request.use((request) => {
    const token = localStorage.getItem('token')
    if(token !== null){
        request.headers.set('Authorization', token);
    }
    return request;
});

client.interceptors.response.use((response) => {
    const token = response.headers.get('Authorization')
    if(token !== null){
        localStorage.setItem('token',token)
    }
    return response;
});
export const getAllEntities = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllEntitiesResponse, GetAllEntitiesError, ThrowOnError>({
    ...options,
    url: '/user'
}); };

export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateUserResponse, UpdateUserError, ThrowOnError>({
    ...options,
    url: '/user'
}); };

export const createEntity = <ThrowOnError extends boolean = false>(options: Options<CreateEntityData, ThrowOnError>) => { return (options?.client ?? client).post<CreateEntityResponse, CreateEntityError, ThrowOnError>({
    ...options,
    url: '/user'
}); };

export const getProductCate = <ThrowOnError extends boolean = false>(options: Options<GetProductCateData, ThrowOnError>) => { return (options?.client ?? client).get<GetProductCateResponse, GetProductCateError, ThrowOnError>({
    ...options,
    url: '/product_cates/{id}'
}); };

export const updateProductCate = <ThrowOnError extends boolean = false>(options: Options<UpdateProductCateData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateProductCateResponse, UpdateProductCateError, ThrowOnError>({
    ...options,
    url: '/product_cates/{id}'
}); };

export const deleteProductCate = <ThrowOnError extends boolean = false>(options: Options<DeleteProductCateData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteProductCateResponse, DeleteProductCateError, ThrowOnError>({
    ...options,
    url: '/product_cates/{id}'
}); };

export const getAllEntities2 = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllEntities2Response, GetAllEntities2Error, ThrowOnError>({
    ...options,
    url: '/product'
}); };

export const updateEntity = <ThrowOnError extends boolean = false>(options: Options<UpdateEntityData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateEntityResponse, UpdateEntityError, ThrowOnError>({
    ...options,
    url: '/product'
}); };

export const createEntity2 = <ThrowOnError extends boolean = false>(options?: Options<CreateEntity2Data, ThrowOnError>) => { return (options?.client ?? client).post<CreateEntity2Response, CreateEntity2Error, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null
    },
    url: '/product'
}); };

export const getAllEntities6 = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllEntities6Response, GetAllEntities6Error, ThrowOnError>({
    ...options,
    url: '/address'
}); };

export const updateAddress = <ThrowOnError extends boolean = false>(options: Options<UpdateAddressData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateAddressResponse, UpdateAddressError, ThrowOnError>({
    ...options,
    url: '/address'
}); };

export const createEntity5 = <ThrowOnError extends boolean = false>(options: Options<CreateEntity5Data, ThrowOnError>) => { return (options?.client ?? client).post<CreateEntity5Response, CreateEntity5Error, ThrowOnError>({
    ...options,
    url: '/address'
}); };

export const getAllEntities7 = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllEntities7Response, GetAllEntities7Error, ThrowOnError>({
    ...options,
    url: '/activity'
}); };

export const updateEntity1 = <ThrowOnError extends boolean = false>(options: Options<UpdateEntity1Data, ThrowOnError>) => { return (options?.client ?? client).put<UpdateEntity1Response, UpdateEntity1Error, ThrowOnError>({
    ...options,
    url: '/activity'
}); };

export const createEntity6 = <ThrowOnError extends boolean = false>(options?: Options<CreateEntity6Data, ThrowOnError>) => { return (options?.client ?? client).post<CreateEntity6Response, CreateEntity6Error, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null
    },
    url: '/activity'
}); };

export const getAllEntities1 = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllEntities1Response, GetAllEntities1Error, ThrowOnError>({
    ...options,
    url: '/product_cates'
}); };

export const createEntity1 = <ThrowOnError extends boolean = false>(options: Options<CreateEntity1Data, ThrowOnError>) => { return (options?.client ?? client).post<CreateEntity1Response, CreateEntity1Error, ThrowOnError>({
    ...options,
    url: '/product_cates'
}); };

export const getAllEntities3 = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllEntities3Response, GetAllEntities3Error, ThrowOnError>({
    ...options,
    url: '/productOption'
}); };

export const createEntity3 = <ThrowOnError extends boolean = false>(options: Options<CreateEntity3Data, ThrowOnError>) => { return (options?.client ?? client).post<CreateEntity3Response, CreateEntity3Error, ThrowOnError>({
    ...options,
    url: '/productOption'
}); };

export const getAllEntities4 = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllEntities4Response, GetAllEntities4Error, ThrowOnError>({
    ...options,
    url: '/processorMap'
}); };

export const createEntity4 = <ThrowOnError extends boolean = false>(options: Options<CreateEntity4Data, ThrowOnError>) => { return (options?.client ?? client).post<CreateEntity4Response, CreateEntity4Error, ThrowOnError>({
    ...options,
    url: '/processorMap'
}); };

export const getAllEntities5 = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllEntities5Response, GetAllEntities5Error, ThrowOnError>({
    ...options,
    url: '/order'
}); };

export const createOrder = <ThrowOnError extends boolean = false>(options: Options<CreateOrderData, ThrowOnError>) => { return (options?.client ?? client).post<CreateOrderResponse, CreateOrderError, ThrowOnError>({
    ...options,
    url: '/order'
}); };

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => { return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
    ...options,
    url: '/auth/login'
}); };

export const getEntityByName = <ThrowOnError extends boolean = false>(options: Options<GetEntityByNameData, ThrowOnError>) => { return (options?.client ?? client).get<GetEntityByNameResponse, GetEntityByNameError, ThrowOnError>({
    ...options,
    url: '/user/{name}'
}); };

export const getEntityByName1 = <ThrowOnError extends boolean = false>(options: Options<GetEntityByName1Data, ThrowOnError>) => { return (options?.client ?? client).get<GetEntityByName1Response, GetEntityByName1Error, ThrowOnError>({
    ...options,
    url: '/address/{school}'
}); };